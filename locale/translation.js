// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bits');
gettext('Bus');
gettext('bit-0');
gettext('Constant bit 0');
gettext('bit-1');
gettext('Constant bit 1');
gettext('generic');
gettext('1-bit generic constant (0/1)');
gettext('Bus-02');
gettext('Bus-03');
gettext('Bus-04');
gettext('Bus-05');
gettext('Bus-06');
gettext('Bus-07');
gettext('Bus-08');
gettext('Bus-09');
gettext('Bus-10');
gettext('Bus-11');
gettext('Bus-12');
gettext('Bus-15');
gettext('Bus-16');
gettext('Bus-17');
gettext('Bus-19');
gettext('Bus-20');
gettext('Bus-22');
gettext('Bus-23');
gettext('Bus-24');
gettext('Bus-27');
gettext('Bus-28');
gettext('Bus-29');
gettext('Bus-31');
gettext('Bus-32');
gettext('Bus-64');
gettext('generic');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('k-1');
gettext('Generic: 2-bits k-1 constant (Input values: 1,2,3,4). It returns the value input by the user minus 1. Outputs: 0,1,2,3');
gettext('Output: 0,1,2,3');
gettext('Inputs: 1,2,3,4');
gettext('value-0');
gettext('2bits constant value: 0');
gettext('value-1');
gettext('2bits constant value: 1');
gettext('value-2');
gettext('2bits constant value: 2');
gettext('value-3');
gettext('2bits constant value: 3');
gettext('generic');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('k-1');
gettext('Generic: 3-bits k-1 constant (Input values: 1,2,...,8). It returns the value input by the user minus 1. Outputs: 0,1,2,...,7');
gettext('Output: 0,1,2,...,7');
gettext('Inputs: 1,2,...,8');
gettext('value-0');
gettext('3bits constant value: 0');
gettext('value-1');
gettext('3bits constant value: 1');
gettext('value-2');
gettext('3bits constant value: 2');
gettext('value-4');
gettext('3bits constant value: 4');
gettext('value-7');
gettext('3bits constant value: 7');
gettext('generic');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('k-1');
gettext('Generic: 4-bits k-1 constant (Input values: 1,2,...,16). It returns the value input by the user minus 1. Outputs: 0,1,2,...,15');
gettext('Output: 0,1,2,...,15');
gettext('Inputs: 1,2,...,16');
gettext('value-0');
gettext('4bits constant value: 0');
gettext('value-0xF');
gettext('4bits constant value: 15 (0xF in hexadecimal)');
gettext('value-1');
gettext('4bits constant value: 1');
gettext('value-2');
gettext('4bits constant value: 2');
gettext('value-4');
gettext('4bits constant value: 4');
gettext('value-8');
gettext('4bits constant value: 8');
gettext('generic');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('k-1');
gettext('Generic: 5-bits k-1 constant (Input values: 1,2,...,32). It returns the value input by the user minus 1. Outputs: 0,1,2,...,31');
gettext('Output: 0,1,2,...,31');
gettext('Inputs: 1,2,...,32');
gettext('value-0');
gettext('5bits constant value: 0');
gettext('generic');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('k-1');
gettext('Generic: 6-bits k-1 constant (Input values: 1,2,...,64). It returns the value input by the user minus 1. Outputs: 0,1,2,...,63');
gettext('Output: 0,1,2,...,63');
gettext('Inputs: 1,2,...,64');
gettext('value-0');
gettext('6bits constant value: 0');
gettext('generic');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('k-1');
gettext('Generic: 7-bits k-1 constant (Input values: 1,2,...,128). It returns the value input by the user minus 1. Outputs: 0,1,2,...,127');
gettext('Output: 0,1,2,...,127');
gettext('Inputs: 1,2,...,128');
gettext('value-0');
gettext('7bits constant value: 0');
gettext('Ascii-A');
gettext('8bits ASCII Letter A');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('Ascii-Asterisk');
gettext('8bits ASCII asterisk symbol *');
gettext('generic');
gettext('k-1');
gettext('Generic: 8-bits k-1 constant (Input values: 1,2,...,256). It returns the value input by the user minus 1. Outputs: 0,1,2,...,255');
gettext('Output: 0,1,2,...,255');
gettext('Inputs: 1,2,...,256');
gettext('value-0');
gettext('8bits constant value: 0');
gettext('k');
gettext('Generic: 9-bits generic constant');
gettext('value-0');
gettext('9bits constant value: 0');
gettext('k');
gettext('value-0');
gettext('10bits constant value: 0');
gettext('k');
gettext('Generic: 11-bits generic constant');
gettext('value-0');
gettext('11bits constant value: 0');
gettext('generic');
gettext('Generic: 12-bits generic constant (0-4095)');
gettext('k-1');
gettext('Generic: 12-bits k-1 constant (Input values: 1,2,...,4096). It returns the value input by the user minus 1. Outputs: 0,1,2,...,4095');
gettext('Output: 0,1,2,...,4095');
gettext('Inputs: 1,2,...,4096');
gettext('value-0');
gettext('12bits constant value: 0');
gettext('k');
gettext('Generic: 15-bits generic constant');
gettext('value-0');
gettext('15bits constant value: 0');
gettext('k-1');
gettext('Generic: 16-bits k-1 constant (Input values: 1,2,...,h10000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFF');
gettext('Output: 0,1,2,...,hffff');
gettext('Inputs: 1,2,...,h10000');
gettext('k');
gettext('Generic: 16-bits generic constant');
gettext('value-0');
gettext('16bits constant value: 0');
gettext('k');
gettext('Generic: 17-bits generic constant');
gettext('k');
gettext('Generic: 19-bits generic constant');
gettext('value-0');
gettext('19bits constant value: 0');
gettext('k-1');
gettext('Generic: 20-bits k-1 constant (Input values: 1,2,...,h100000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFF');
gettext('Output: 0,1,2,...,hfffff');
gettext('Inputs: 1,2,...,h100000');
gettext('k');
gettext('Generic: 20-bits generic constant');
gettext('value-0');
gettext('20bits constant value: 0');
gettext('k');
gettext('Generic: 22-bits generic constant');
gettext('k');
gettext('Generic: 23-bits generic constant');
gettext('value-0');
gettext('23bits constant value: 0');
gettext('k-1');
gettext('Generic: 24-bits k-1 constant (Input values: 1,2,...,h1000000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFFF');
gettext('Output: 0,1,2,...,hffffff');
gettext('Inputs: 1,2,...,h1000000');
gettext('k');
gettext('Generic: 24-bits generic constant');
gettext('value-0');
gettext('24bits constant value: 0');
gettext('k');
gettext('Generic: 27-bits generic constant');
gettext('value-0');
gettext('27bits constant value: 0');
gettext('k-1');
gettext('Generic: 28-bits k-1 constant (Input values: 1,2,...,h10000000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFFFF');
gettext('k');
gettext('Generic: 28-bits generic constant');
gettext('value-0');
gettext('28bits constant value: 0');
gettext('k');
gettext('Generic: 29-bits generic constant');
gettext('k');
gettext('Generic: 31-bits generic constant');
gettext('value-0');
gettext('31bits constant value: 0');
gettext('k-1');
gettext('Generic: 32-bits k-1 constant (Input values: 1,2,...,h100000000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFFFFF');
gettext('k');
gettext('Generic: 32-bits generic constant');
gettext('value-0');
gettext('32bits constant value: 0');
gettext('k');
gettext('Generic: 64-bits generic constant');
gettext('01-Turn-on-LEDs');
gettext('02-Generic-constants');
gettext('TESTs');
gettext('00-Index');
gettext('# INDEX: IceK Collection');
gettext('bit 0');
gettext('## Bits');
gettext('bit 1');
gettext('## Bus');
gettext('### 1-bit constants');
gettext('Generic constant');
gettext('### 2-bits constants');
gettext('### 3-bits constants');
gettext('### 4-bits constants');
gettext('### 5-bits constants');
gettext('### 6-bits constants');
gettext('### 7-bits constants');
gettext('### 8-bits constants');
gettext('Ascii 'A'');
gettext('Ascii '*'');
gettext('### 12-bits constants');
gettext('### 16-bits constants');
gettext('### 20-bits constants');
gettext('### 24-bits constants');
gettext('### 28-bits constants');
gettext('### 32-bits constants');
gettext('### 11-bits constants');
gettext('### 9-bits constants');
gettext('### 10-bits constants');
gettext('### 15-bits constants');
gettext('### 19-bits constants');
gettext('### 23-bits constants');
gettext('### 27-bits constants');
gettext('### 31-bits constants');
gettext('### 22-bits constants');
gettext('### 17-bits constants');
gettext('### 29-bits constants');
gettext('### 64-bits constants');
gettext('Alhambra-II');
gettext('Fomu');
gettext('IceZum-Alhambra');
gettext('MyStorm-BlackIce');
gettext('Nandland-Go-board');
gettext('Radiona-ULX3S-12F');
gettext('iCE40HX8K-Breakout');
gettext('iCE40UP-Breakout');
gettext('iCESugar-1.5');
gettext('iceBreaker');
gettext('iceStick');
gettext('tinyFPGA');
gettext('01-One-LED');
gettext('# Turn on a LED');
gettext('1-bit constant');
gettext('Output pin');
gettext('## Result\n\nThe LED0 is on\n\n(If you are connected to Internet you will see a picture)  \n\n![Alhambra II image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/Alhambra-II/Example-01-01.png)');
gettext('02-Two-LEDs');
gettext('# Turning on two LEDs\n\nThe 2-bit constant 3 (11 in binary) is used to turn on  \ntwo LEDs');
gettext('Output pins');
gettext('2-bit constant value 3  \n(11 in binary)');
gettext('## Result:\n\nThe LEDs 0 and 1 are turned on  \n\n(If you are connected to internet you will see a picture)  \n\n![Alhambra II board picture](https://raw.githubusercontent.com/FPGAwars/iceK/main/wiki/images/Alhambra-II/Example-01-02-2.png)\n\n');
gettext('01-One-LED');
gettext('## Result\n\nThe RGB LED is turned GREEN\n\n(If you are connected to Internet you will see a picture)  \n\n![Fomu image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/Fomu/Example-01-02-2.png)');
gettext('usb pins must be \"0\"');
gettext('usb_dp_pu');
gettext('Green');
gettext('Red');
gettext('Blue');
gettext('RGB LED work with  \nnegative logic:  \n* 0: Turn LED on  \n* 1: Turn LED off  \nThe three components (red, green, blue) act as  \nindependent LEDs');
gettext('The Red and Blue components  \nare turned off');
gettext('02-Two-LEDs');
gettext('# Turn on two LEDs');
gettext('## Result\n\nThe components Green and Red of the RGB LED are turned on, so that  \nthe color displayed is Yellow\n\n(If you are connected to Internet you will see a picture)  \n\n![Fomu image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/Fomu/Example-01-02-2.png)');
gettext('2-bit constant value 0  \n(00 in binary)');
gettext('LEDs R and G work with  \nnegative logic:  \n* 0: Turn LED on  \n* 1: Turn LED off');
gettext('The RGB2 is turned off   \n(No blue color)  \n(negative logic)');
gettext('01-One-LED');
gettext('## Result\n\nThe LED0 is on\n\n(If you are connected to Internet you will see a picture)  \n\n![Icezum Alhambra image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/Icezum-Alhambra/Example-01-01-2.png)  ');
gettext('02-Two-LEDs');
gettext('## Result:\n\nThe LEDs 0 and 1 are turned on  \n\n(If you are connected to internet you will see a picture)  \n\n![Icezum Alhambra picture](https://github.com/FPGAwars/iceK/raw/main/wiki/images/Icezum-Alhambra/Example-01-02-2.png)\n\n');
gettext('01-One-LED');
gettext('## Result\n\nThe LED1 (blue) is on\n\n(If you are connected to Internet you will see a picture)  \n\n![MyStorm blackIce image](https://raw.githubusercontent.com/FPGAwars/iceK/main/wiki/images/MyStorm-Blackice/Example-01-01-2.png)  ');
gettext('Turn off LED2  \n(The FPGA pins are in high impedance state  \nso that not driven LEDs bright a little bit)  ');
gettext('02-Two-LEDs');
gettext('## Result:\n\nThe LEDs 1 (blue) and 2 (green) are turned on  \n\n(If you are connected to internet you will see a picture)  \n\n![Mystorm Blackice](https://github.com/FPGAwars/iceK/raw/main/wiki/images/MyStorm-Blackice/Example-01-02-2.png)\n\n');
gettext('01-One-LED');
gettext('## Result\n\nThe LED D1 (green) is on\n\n(If you are connected to Internet you will see a picture)  \n\n![Nandland-Go-board image](https://raw.githubusercontent.com/FPGAwars/iceK/main/wiki/images/NandLand-Go-Board/Example-01-01-2.png)  ');
gettext('02-Two-LEDs');
gettext('## Result:\n\nThe LEDs D1 and D2 are turned on  \n\n(If you are connected to internet you will see a picture)  \n\n![Nandland Go Board picture](https://raw.githubusercontent.com/FPGAwars/iceK/main/wiki/images/NandLand-Go-Board/Example-01-02-2.png)\n\n');
gettext('01-One-LED');
gettext('## Result\n\nThe LED0 (D0) is on (red)\n\n(If you are connected to Internet you will see a picture)  \n\n![Radiona ULX3S-12F image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/Radiona-ULX3S-12F/Example-01-01-2.png)');
gettext('wifi_gpio0 should be 0 if wifi  \nis not used');
gettext('02-Two-LEDs');
gettext('## Result:\n\nThe LEDs 0 (D0,red) and 1 (D1, orange) are turned on\n\n(If you are connected to Internet you will see a picture)  \n\n![Radiona ULX3S-12F image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/Radiona-ULX3S-12F/Example-01-02-2.png)');
gettext('01-One-LED');
gettext('## Result\n\nThe LED0 (red, D9) is on\n\n(If you are connected to Internet you will see a picture)  \n\n![Lattice ice40HX8K Breakout Board image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iCE40HX8K-Breakout/Example-01-01-2.png)  ');
gettext('02-Two-LEDs');
gettext('## Result:\n\nThe LEDs 0 (D9) and 1 (D8) are turned on  \n\n(If you are connected to internet you will see a picture)  \n\n![Lattice iCE40-HX8K Breakout board Image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iCE40HX8K-Breakout/Example-01-02-2.png)\n\n');
gettext('01-One-LED');
gettext('## Result\n\nThe RGB LED is turned RED\n\n(If you are connected to Internet you will see a picture)  \n\n![Lattice ice40UP Breakout Board image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iCE40UP-Breakout/Example-01-01-2.png)  ');
gettext('The Green and Blue components  \nare turned off');
gettext('02-Two-LEDs');
gettext('## Result\n\nThe components Red and Green of the RGB LED are turned on, so that  \nthe color displayed is Yellow\n\n(If you are connected to Internet you will see a picture)  \n\n![Lattice ice40UP Breakout Board image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iCE40UP-Breakout/Example-01-02-2.png)  ');
gettext('The LED_B is turned off   \n(No blue color)  \n(negative logitc)');
gettext('01-One-LED');
gettext('## Result\n\nThe RGB LED is turned RED\n\n(If you are connected to Internet you will see a picture)  \n\n![iCESugar 1.5 image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iCESugar-1.5/Example-01-01-2.png)  ');
gettext('02-Two-LEDs');
gettext('## Result\n\nThe components Red and Blue of the RGB LED are turned on, so that  \nthe color displayed is Magenta\n\n(If you are connected to Internet you will see a picture)  \n\n![iCESugar 1.5 image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iCESugar-1.5/Example-01-02-2.png)  ');
gettext('The LED_G is turned off   \n(No blue color)  \n(negative logitc)');
gettext('01-One-LED');
gettext('# Turn on the red LED');
gettext('## Result\n\nThe green LED (G) is on\n\n(If you are connected to Internet you will see a picture)  \n\n![icebreakerA image](https://raw.githubusercontent.com/FPGAwars/iceK/main/wiki/images/iceBreaker/Example-01-01-2.png)  ');
gettext('LEDs G and R works with  \nnegative logic:  \n* 0: Turn LED on  \n* 1: Turn LED off');
gettext('02-Two-LEDs');
gettext('# Turning on two LEDs\n\nThe 2-bit constant 0 (00 in binary) is used to turn on  \ntwo LEDs');
gettext('## Result:\n\nThe LEDs G and R are turned on  \n\n(If you are connected to internet you will see a picture)  \n\n![iceBreaker board picture](https://raw.githubusercontent.com/FPGAwars/iceK/main/wiki/images/iceBreaker/Example-01-02-2.png)\n\n');
gettext('01-One-LED');
gettext('## Result\n\nThe LED D1 is on\n\n(If you are connected to Internet you will see a picture)  \n\n![Alhambra II image](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iceStick/Example-01-01-2.png)  ');
gettext('02-Two-LEDs');
gettext('## Result:\n\nThe LEDs D1 and D2 are turned on  \n\n(If you are connected to internet you will see a picture)  \n\n![iceStick board picture](https://github.com/FPGAwars/iceK/raw/main/wiki/images/iceStick/Example-01-02-2.png)\n\n');
gettext('01-One-LED');
gettext('## Result\n\nThe red LED is on (Boot)\n\n(If you are connected to Internet you will see a picture)  \n\n![TinyFPGA image](https://raw.githubusercontent.com/FPGAwars/iceK/main/wiki/images/TinyFPGA/Example-01-01-2.png)  ');
gettext('Alhambra-II');
gettext('01-One-LEDs');
gettext('# 1-bit Generic constant on one LED\n\nThe value of the 1-bit generic constante is used for turning  \non or off the LED');
gettext('Set the value  \nof the k constant (0 / 1)');
gettext('1-bit generic constant');
gettext('02-Two-LEDs');
gettext('# 2-bit Generic constant on two LEDs\n\nThe value of the 2-bit generic constante is used for turning  \non or off two LEDs');
gettext('Set the value  \nof the k constant (0-3)');
gettext('You can write the constants  \nin binary');
gettext('03-Four-LEDs');
gettext('# 4-bit Generic constant on four LEDs\n\nThe value of the 4-bit generic constante is used for turning  \non or off two LEDs');
gettext('Set the value  \nof the k constant (0-15)');
gettext('You can write the  \nconstants in binary');
gettext('..Or in hexa');
gettext('4-bit generic constant');
gettext('Bus');
gettext('bits');
gettext('Bus-02');
gettext('Bus-03');
gettext('Bus-04');
gettext('Bus-05');
gettext('Bus-06');
gettext('Bus-07');
gettext('Bus-08');
gettext('Bus-09');
gettext('Bus-10');
gettext('Bus-11');
gettext('Bus-12');
gettext('Bus-15');
gettext('Bus-16');
gettext('Bus-17');
gettext('Bus-19');
gettext('Bus-20');
gettext('Bus-22');
gettext('Bus-23');
gettext('Bus-24');
gettext('Bus-27');
gettext('Bus-28');
gettext('Bus-29');
gettext('Bus-31');
gettext('Bus-32');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Changing the state of two LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n0, 1, 2 and 3');
gettext('02-value-0');
gettext('Generic: 2-bits generic constant (0/1)');
gettext('## 2-bits Value 0: Turning off two LEDs\n\nIt will turn off the Two LEDs');
gettext('03-value-1');
gettext('## 2-bits Value 1: Tests on LEDs\n\nIt will turn on one LED');
gettext('04-value-2');
gettext('## 2-bits Value 2: Test on leds\n\nIt will turn on one LED');
gettext('05-value-3');
gettext('## 2-bits Value 3: Turning on two LEDs\n\nIt will turn on the Two LEDs');
gettext('06-k-1');
gettext('Values for testing:  \n1, 2, 3 and 4');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Changing the state of 3 LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n0-7');
gettext('k-1');
gettext('## Changing the state of LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n1, 2, ..., 8');
gettext('value-0');
gettext('## 3-bits Value 0: Test on LEDs\n\nIt will turn off the Three LEDs');
gettext('value-1');
gettext('## 3-bits Value 1: Test on LEDs\n\nShow the value on the LEDs');
gettext('value-2');
gettext('## 3-bits Value 2: Test on LEDs\n\nShow the value on the LEDs');
gettext('value-4');
gettext('## 3-bits Value 4: Test on LEDs\n\nShow the value on the LEDs');
gettext('value-7');
gettext('## 3-bits Value 7: Turning on three LEDs\n\nIt will turn on the Three LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Changing the state of 4 LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n0-15');
gettext('k-1');
gettext('value-0');
gettext('## 4-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('value-0xF');
gettext('## 4-bits Value 15: Test on LEDs\n\nShow the values on the LEDs');
gettext('value-1');
gettext('## 4-bits Value 1: Test on LEDs\n\nShow the values on the LEDs');
gettext('value-2');
gettext('## 4-bits Value 2: Test on LEDs\n\nShow the values on the LEDs');
gettext('value-4');
gettext('## 4-bits Value 4: Test on LEDs\n\nShow the values on the LEDs');
gettext('value-8');
gettext('## 4-bits Value 8: Test on LEDs\n\nShow the values on the LEDs');
gettext('value-F');
gettext('4bits constant value: 15');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Changing the state of 5 LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n0-31');
gettext('k-1');
gettext('Values for testing:  \n1, 2, ..., 32');
gettext('value-0');
gettext('## 5-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Changing the state of 6 LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n0-63');
gettext('k-1');
gettext('Values for testing:  \n1, 2, ..., 64');
gettext('value-0');
gettext('## 6-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Changing the state of 7 LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n0-127');
gettext('k-1');
gettext('Values for testing:  \n1, 2, ..., 128');
gettext('value-0');
gettext('## 7-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Changing the state of 8 LEDs\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LEDs');
gettext('Values for testing:  \n0-255');
gettext('k-1');
gettext('Values for testing:  \n1, 2, ..., 256');
gettext('value-0');
gettext('## 8-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus9-Split-half: Split the 9-bits bus into two buses of 1 and 8 wires');
gettext('2-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (4-bit channels)');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('OR2: Two bits input OR gate');
gettext('Two bits input And gate');
gettext('NOT gate (Verilog implementation)');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Bus7-Join-7-1: Join the two buses into an 8-bits Bus');
gettext('## 9-bits constant: Manual testing\n\n');
gettext('Channel B');
gettext('Channel A');
gettext('Input');
gettext('Output');
gettext('02-value-0');
gettext('2-to-1 Multplexer (9-bit channels)');
gettext('Bus8-Join-1-8: Join the two buses into an 9-bits Bus');
gettext('UINT8-1bit:  Extend a 1-bit unsigned integer to 8-bits ');
gettext('## 9-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Bus10-Split-half: Split the 10-bits bus into two buses of 2 and 8 wires');
gettext('Bus8-Join-6-2: Join the two buses into an 8-bits Bus');
gettext('## 10-bits constant: Manual testing\n\n');
gettext('02-value-0');
gettext('2-to-1 Multplexer (10-bit channels)');
gettext('Bus10-Split-2-8: Split the 10-bits bus into two buses of 2 and 8 wires');
gettext('2-to-1 Multplexer (2-bit channels)');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Bus10-Join-2-8: Join the two buses into an 10-bits Bus');
gettext('UINT8-2bits:  Extend a 2-bits unsigned integer to 8-bits ');
gettext('## 10-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus11-Split-3-8: Split the 11-bits bus into two buses of 3 and 8 wires');
gettext('Bus8-Join-5-3: Join the two buses into an 8-bits Bus');
gettext('## Testing a 11-bits constant\n\nThe value is shown in 8 LEDs');
gettext('02-value-0');
gettext('2-to-1 Multplexer (11-bit channels)');
gettext('2-to-1 Multplexer (3-bit channels)');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Bus11-Join-3-8: Join the two buses into an 11-bits Bus');
gettext('UINT8-3bits:  Extend a 3-bits unsigned integer to 8-bits ');
gettext('## 11-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus12-Split-4-8: Split the 12-bits bus into two buses of 4 and 8 wires');
gettext('## Testing a 12-bits constant\n\nThe value is shown in 8 LEDs. Initially only the less significant  \nbits. When the button is pressed, the Upper bits are displayed');
gettext('Values for testing:  \n0-4096');
gettext('k-1');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Bus15-Split-7-8: Split the 15-bits bus into two buses of 7 and 8 wires');
gettext('Bus7-Join-1-7: Join the two buses into an 8-bits Bus');
gettext('## 15-bits constant: Manual testing\n\n');
gettext('02-value-0');
gettext('2-to-1 Multplexer (15-bit channels)');
gettext('Bus15-Split-7-8: Split the 15-bits bus into two buses of 7 and 8 bits');
gettext('2-to-1 Multplexer (7-bit channels)');
gettext('Bus7-Join-3-4: Join the two buses into a 7-bits Bus');
gettext('Bus7-Split-3-4: Split the 7-bits bus into two buses of 3 and 4 wires');
gettext('Bus15-Join-7-8: Join the two buses into a 15-bits Bus');
gettext('UINT8-7bits:  Extend a 7-bits unsigned integer to 8-bits ');
gettext('## 15-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('## Testing a 16-bits constant\n\nThe value is shown in 8 LEDs. Initially only the less significant  \nbits. When the button is pressed, the Upper bits are displayed');
gettext('Values for testing:  \n0-FFFF');
gettext('k-1');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('D Flip-flop (verilog implementation)');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('16-bits Syscounter with reset');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Display16-8: Display a 16-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('Counter-x01: 1-bit counter');
gettext('Reg: 1-Bit register');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('Bus20-Split-4-16: Split the 20-bits bus into two buses of 4 and 16 wires');
gettext('## 17-bits constant: Manual testing\n\n');
gettext('System clock');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Data input');
gettext('Initial default  \nvalue: 0');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Bus19-Split-3-8-8: Split the 19-bits bus into three buses of 3, 8 and 8 wires');
gettext('4-to-1 Multplexer (8-bit channels)');
gettext('Counter-x02: 2-bits counter');
gettext('Generic component with clk input');
gettext('Inc1-2bit: Increment a 2-bits number by one');
gettext('AdderK-2bit: Adder of 2-bit operand and 2-bit constant');
gettext('Adder-2bits: Adder of two operands of 2 bits');
gettext('## 19-bits constant: Manual testing\n\n');
gettext('02-value-0');
gettext('2-to-1 Multplexer (19-bit channels)');
gettext('Bus19-Join-3-8-8: Join the three buses into a 19-bits Bus');
gettext('## 19-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('## Testing a 20-bits constant\n\nThe value is shown in 8 LEDs. Initially only the less significant  \nbits. When the button is pressed, the Upper bits are displayed');
gettext('Values for testing:  \n0-FFFFF');
gettext('k-1');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Display32-8: Display a 32-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires');
gettext('Bus32-Join-10-22: Join the two buses into an 32-bits Bus');
gettext('## 22-bits constant: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Bus23-Split-7-8-8: Split the 23-bits bus into three buses of 7, 8 and 8 wires');
gettext('## 23-bits constant: Manual testing\n\n');
gettext('02-value-0');
gettext('2-to-1 Multplexer (23-bit channels)');
gettext('Bus19-Split-3-8-8: Split the 19-bits bus into three buses of 3,8 and 8 bits');
gettext('Bus23-Join-7-8-8: Join the three buses into a 23-bits Bus');
gettext('## 23-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus24-Split-8-16: Split the 24-bits bus into two buses of 8 and 16 wires');
gettext('## Testing the 24-bits generic constant\n\nThe 24-bits constants is displayed on the 8 LEDs. When the sw1 button  \nis pressed the 8 Most significant bits are displayed. The button sw2 switches  \nbetween the 8 less significant bits and the 8 bits in the middle');
gettext('Values for testing:  \n0-FFFFFF');
gettext('k-1');
gettext('## Testing the 24-bits generic k-1 constant\n\nThe 24-bits constants is displayed on the 8 LEDs. When the sw1 button  \nis pressed the 8 Most significant bits are displayed. The button sw2 switches  \nbetween the 8 less significant bits and the 8 bits in the middle');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Bus27-Split-3-8-8-8: Split the 27-bits bus into four buses of 7,8, 8 and 8 bits');
gettext('## 27-bits constant: Manual testing\n\n');
gettext('02-value-0');
gettext('2-to-1 Multplexer (27-bit channels)');
gettext('Bus27-Join-3-8-8-8: Join the four buses into a 27-bits Bus');
gettext('## 27-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus28-Split-4-24: Split the 28-bits bus into two buses of 4 and 24 wires');
gettext('## 28-bits generic constant: Manual testing\n\nThe 28-bits constants is displayed on the 8 LEDs. When the sw1 button  \nis pressed the 8 Most significant bits are displayed. The button sw2 switches  \nbetween the 8 less significant bits and the 8 bits in the middle');
gettext('Values for testing:  \n0-FFFFFFF');
gettext('k-1');
gettext('## 28-bits generic k-1 constant: Manual testing\n\nThe 28-bits constants is displayed on the 8 LEDs. When the sw1 button  \nis pressed the 8 Most significant bits are displayed. The button sw2 switches  \nbetween the 8 less significant bits and the 8 bits in the middle');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus32-Join-3-29: Join the two buses into an 32-bits Bus');
gettext('## 29-bits generic constant: Manual testing\n\nThe 29-bits constant is shown on the LEDs');
gettext('Alhambra-II');
gettext('01-manual-btns-leds');
gettext('Bus31-Split-7-8-8-8: Split the 31-bits bus into four buses of 7, 8, 8 and 8 wires');
gettext('## 31-bits constant: Manual testing\n\n');
gettext('02-value-0');
gettext('2-to-1 Multplexer (31-bit channels)');
gettext('Bus31-Split-7-8-8-8: Split the 31-bits bus into four buses of 7,8, 8 and 8 bits');
gettext('Bus31-Join-7-8-8-8: Join the four buses into a 31-bits Bus');
gettext('## 31-bits Value 0: Test on LEDs\n\nShow the values on the LEDs');
gettext('Alhambra-II');
gettext('01-generic');
gettext('Bus32-Split-8-24: Split the 28-bits bus into two buses of 8 and 24 wires');
gettext('## 32 Bits constant: Manual testing\n\nThe 32-bits constants is displayed on the 8 LEDs. When the sw1 button  \nis pressed the 8 Most significant bits are displayed. The button sw2 switches  \nbetween the 8 less significant bits and the 8 bits in the middle');
gettext('Values for testing:  \n0-FFFFFFFF');
gettext('k-1');
gettext('## 32 Bits k-1 constant: Manual testing\n\nThe 32-bits constants is displayed on the 8 LEDs. When the sw1 button  \nis pressed the 8 Most significant bits are displayed. The button sw2 switches  \nbetween the 8 less significant bits and the 8 bits in the middle');
gettext('Alhambra-II');
gettext('01-bit-0');
gettext('## Turn off an LED\n\nOutput the 0-bit value. It will turn off the LED');
gettext('02-bit-1');
gettext('## Turn on an LED\n\nOutput the 1-bit value. It will turn on the LED');
gettext('03-generic-bit');
gettext('## Changing the state of an LED\n\nOutput the value given by the parameter. This value  \nwill turn on or off the LED');
